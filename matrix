#include <iostream>
using namespace std;
namespace kostil{ // ввожу пространство имён просто чтобы константа распространялась на все функции до инициализации
 const int size = 5;} // размер матрицы (квадратной)
int mmline(int arr[], int matrix[kostil::size][kostil::size]);
int checktower(double a, int i, int matrix[kostil::size][kostil::size]);
int checktower(int a, int i, int matrix[kostil::size][kostil::size]);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



int main() {
	int matrix[kostil::size][kostil::size] = {
	{1, 5, 30, 7, 30},
	{60, 70, 50, 50, 200}, 
	{7, 8, 25, 13, 27}, 
	{1, 1, 28, 8, 28}, 
	{10, 15, 26, 7, 27}}; // ввод матрицы

	int a, i = 0, j = 0;
	for (matrix; i < kostil::size; ++i) {
		j = 0;
		cout << endl; // переход на новую строчку
		for (matrix; j < kostil::size; ++j)
			cout << (a = matrix[i][j]) << "\t";// вывод первой строчки через табуляцию
	}

// перебор всех элементов массива
	a = 0, i = 0, j = 0;
	for (matrix; i < kostil::size; ++i) {
		cout << endl << "FLOPPA" << endl; // переход на новую строчку
		int arr[kostil:: size];
		for (matrix; j < kostil::size; ++j)
			arr[j] = matrix[i][j];
		j = 0;
		cout << mmline(arr, matrix);
	}
	return 0;
}

int mmline(int arr[], int matrix[kostil::size][kostil::size]) { // функция находит минимум и максимум строчки 
	int max = 0, min = 1000000, i = 0;
	for (arr; i < kostil::size; ++i) {
		if (arr[i] < min) // min
			min = arr[i];
		if (arr[i] > max) // max
			max = arr[i];
	}
	i = 0;
	if (min == max) // проверка на одинаковые числа в строке
		for (arr; i < kostil::size; ++i) {
			checktower(arr[i], i, matrix);
			checktower(double(arr[i]), i, matrix); // Значения могут выводиться как ответ лишь в одном из случаев, а ситуацию когда все элементы столбца и строки одинаковы я рассматриваю в checktower(int);
		}
	else {
		for (arr; i < kostil::size; ++i) {
			if (arr[i] = min)
				checktower(double(arr[i]), i, matrix); // тут сделаю перегрузку на дабл!
			if (arr[i] = max)
				checktower(arr[i], i, matrix); // перегрузку на инт
		}
	}
	return 0;
}


int checktower(double a, int i, int matrix[kostil::size][kostil::size]) { // проверка для минимумов
	int j = 0, b,max = 0;
	for (matrix; j < kostil::size; ++j) {
		b = matrix[j][i];
		if (b > max) // находим максимум в столбце 
			max = b;
	}
	j = 0;
	for (matrix; j < kostil::size; ++j) { // если подаваемый минимум равен максимуму в столбце значения столбца сравниваются с максимумом и при совпадении 
		if (max == a) {
			b = matrix[j][i];
			if (b == max)
				cout << "Number = " << a << "\n" << "String:" << j + 1 << "\n" << "Column:" << i + 1 << "\n" << "\n";
		}
	}
	return 0;
}


int checktower(int a, int i, int matrix[kostil::size][kostil::size]) { // проверка для максимумов и исключений
	int j = 0, b, min = 1000000,k = 0,string = -1,strong = -1;
	for (matrix; j < kostil::size; ++j) {
		b = matrix[j][i];


		if (b == a) // счетчик одинаковых элементов в столбце
			++k;


		if (b <= min) // нахождение минимума в столбце
			min = b;
	}


	if (k == 5) // если все элементы в столбце одинаковы, то программа должна вывести их как ответ в предыдущей функции
		return 0;


	j = 0;
	for (matrix; j < kostil::size; ++j) {
		if (min == a) {
			b = matrix[j][i];
			if (b == min) 
				cout << " LOWKICK " << "Number = " << a << "\n" << "String:" << j + 1 << "\n" << "Column:" << i + 1 << "\n" << "\n";
		}
	}
	return 0;
}
